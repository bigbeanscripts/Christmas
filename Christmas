-- Christmas 

-- Create a ScreenGui for our minimize button
local MinimizeGui = Instance.new("ScreenGui")
MinimizeGui.Name = "MinimizeGui"
MinimizeGui.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")
MinimizeGui.ResetOnSpawn = false

-- Create the minimize button with centered positioning
local MinimizeButton = Instance.new("TextButton")
MinimizeButton.Name = "MinimizeButton"
MinimizeButton.Parent = MinimizeGui
MinimizeButton.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
MinimizeButton.BorderColor3 = Color3.fromRGB(50, 50, 50)
MinimizeButton.AnchorPoint = Vector2.new(0.5, 0.5)
MinimizeButton.Position = UDim2.new(0.5, 0, 0.5, 0)
MinimizeButton.Size = UDim2.new(0, 80, 0, 40)
MinimizeButton.Font = Enum.Font.GothamBold
MinimizeButton.Text = "Close"
MinimizeButton.TextColor3 = Color3.fromRGB(255, 255, 255)
MinimizeButton.TextSize = 16.000

-- Add corner radius
local UICorner = Instance.new("UICorner")
UICorner.CornerRadius = UDim.new(0, 6)
UICorner.Parent = MinimizeButton

-- Create X button for removal
local CloseButton = Instance.new("TextButton")
CloseButton.Name = "CloseButton"
CloseButton.Parent = MinimizeButton
CloseButton.BackgroundTransparency = 1
CloseButton.Position = UDim2.new(1, -20, 0, 0)
CloseButton.Size = UDim2.new(0, 20, 0, 20)
CloseButton.Font = Enum.Font.GothamBold
CloseButton.Text = "Ã—"
CloseButton.TextColor3 = Color3.fromRGB(255, 255, 255)
CloseButton.TextSize = 16.000
CloseButton.ZIndex = 2

-- Close button functionality
CloseButton.MouseButton1Click:Connect(function()
    -- Destroy the MinimizeButton and CloseButton
    MinimizeButton:Destroy()
    CloseButton:Destroy()
    -- Optionally, destroy the entire GUI if needed
    MinimizeGui:Destroy()
end)



-- Make button draggable
local UserInputService = game:GetService("UserInputService")
local dragging
local dragStart
local startPos

MinimizeButton.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        dragging = true
        dragStart = input.Position
        startPos = MinimizeButton.Position
        
        input.Changed:Connect(function()
            if input.UserInputState == Enum.UserInputState.End then
                dragging = false
            end
        end)
    end
end)

UserInputService.InputChanged:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseMovement and dragging then
        local delta = input.Position - dragStart
        MinimizeButton.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
    end
end)

-- Add hover effects for main button
MinimizeButton.MouseEnter:Connect(function()
    game:GetService("TweenService"):Create(MinimizeButton, TweenInfo.new(0.2), {
        BackgroundColor3 = Color3.fromRGB(40, 40, 40)
    }):Play()
end)

MinimizeButton.MouseLeave:Connect(function()
    game:GetService("TweenService"):Create(MinimizeButton, TweenInfo.new(0.2), {
        BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    }):Play()
end)

-- Add hover effects for close button
CloseButton.MouseEnter:Connect(function()
    game:GetService("TweenService"):Create(CloseButton, TweenInfo.new(0.2), {
        TextColor3 = Color3.fromRGB(255, 100, 100)
    }):Play()
end)

CloseButton.MouseLeave:Connect(function()
    game:GetService("TweenService"):Create(CloseButton, TweenInfo.new(0.2), {
        TextColor3 = Color3.fromRGB(255, 255, 255)
    }):Play()
end)

-- Add shadow
local Shadow = Instance.new("ImageLabel")
Shadow.Name = "Shadow"
Shadow.AnchorPoint = Vector2.new(0.5, 0.5)
Shadow.BackgroundTransparency = 1
Shadow.Position = UDim2.new(0.5, 0, 0.5, 0)
Shadow.Size = UDim2.new(1, 10, 1, 10)
Shadow.ImageColor3 = Color3.fromRGB(0, 0, 0)
Shadow.ImageTransparency = 0.5
Shadow.Image = "rbxassetid://7912134082"
Shadow.Parent = MinimizeButton
Shadow.ZIndex = MinimizeButton.ZIndex - 1
local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
-- Create window with proper callbacks
local Window = Fluent:CreateWindow({
    Title = "Bean Hub",
    SubTitle = "By Duckie",
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 460),
    Acrylic = true,
    Theme = "Dark",
    MinimizeKey = Enum.KeyCode.LeftControl,
    OnDestroy = function()
        local fadeOut = game:GetService("TweenService"):Create(MinimizeGui, TweenInfo.new(0.5), {
            Transparency = 1
        })
        fadeOut:Play()
        fadeOut.Completed:Connect(function()
            MinimizeGui:Destroy()
        end)
    end
})

local Tabs = {
    Christmas = Window:AddTab({ Title = "Christmas", Icon = "snowflake" })
}

-- Initialize state
local isMinimized = false
Window:Minimize(false)

-- Regular minimize/maximize functionality
MinimizeButton.MouseButton1Click:Connect(function()
    isMinimized = not isMinimized
    Window:Minimize(isMinimized)

    local textTween = game:GetService("TweenService"):Create(MinimizeButton, TweenInfo.new(0.2), {
        TextTransparency = 1
    })
    
    textTween:Play()
    textTween.Completed:Connect(function()
        MinimizeButton.Text = isMinimized and "Open" or "Close"
        game:GetService("TweenService"):Create(MinimizeButton, TweenInfo.new(0.2), {
            TextTransparency = 0
        }):Play()
    end)
end)

-- Close button functionality 
CloseButton.MouseButton1Click:Connect(function()
    MinimizeGui:Destroy()
    Window:Destroy()
end)



local Section = Tabs.Christmas:AddSection("Auto Fight")
-- Retrieve NPC names from the specific path
local npcFolderPath = workspace.GameObjects.ArmWrestling.Frostlands.NPC
local modelNames = {}
local models = {}

for _, npc in pairs(npcFolderPath:GetChildren()) do
    if npc:IsA("Model") then
        table.insert(models, npc)
        table.insert(modelNames, npc.Name)
    end
end

-- Sort NPC names alphabetically
table.sort(modelNames)

-- Reordered UI Elements (Dropdown at top)
local modelDropdown = Tabs.Christmas:AddDropdown("ModelDropdown", {
    Title = "Select Boss",
    Values = modelNames,
    Multi = false,
    Default = modelNames[1],
})

-- Auto Fight in middle
local AutoFightToggle = Tabs.Christmas:AddToggle("AutoFight", {Title = "Auto Fight", Default = false })
AutoFightToggle:OnChanged(function()
    if AutoFightToggle.Value then
        while AutoFightToggle.Value do
            local selectedNPC = modelDropdown.Value
            if selectedNPC then
                local npcModel = npcFolderPath:FindFirstChild(selectedNPC)
                if npcModel and npcModel:FindFirstChild("Table") then
                    local npcTable = npcModel.Table

                    local args = {
                        [1] = selectedNPC,
                        [2] = npcTable,
                        [3] = "Frostlands" -- Fixed folder reference for consistency
                    }

                    game:GetService("ReplicatedStorage").Packages.Knit.Services.ArmWrestleService.RE.onEnterNPCTable:FireServer(unpack(args))
                end
            end
            wait(1) -- Changed to 2 seconds
        end
    end
end)

-- Auto Click at bottom
local AutoClickToggle = Tabs.Christmas:AddToggle("AutoClick", {Title = "Auto Click", Default = false })
AutoClickToggle:OnChanged(function()
    if AutoClickToggle.Value then
        while AutoClickToggle.Value do
            game:GetService("ReplicatedStorage").Packages.Knit.Services.ArmWrestleService.RE.onClickRequest:FireServer()
            wait(0.1) -- Changed to 0.1 seconds
        end
    end
end)

modelDropdown:OnChanged(function(Value) end)


local Section = Tabs.Christmas:AddSection("Auto NPC Farm")

local VirtualInputManager = game:GetService("VirtualInputManager")
local npcFolderPath = workspace.GameObjects.ArmWrestling.Frostlands.NPC
local snowstormPath = workspace.GameObjects.RngNPCs["Frostlands-Snowstorm"].Npc
local isAutoFarming = false
local isBossFighting = false

local function updateProximityPrompts(folder)
    for _, descendant in ipairs(folder:GetDescendants()) do
        if descendant:IsA("ProximityPrompt") then
            descendant.HoldDuration = 0
            descendant.Style = Enum.ProximityPromptStyle.Default
            descendant.MaxActivationDistance = 6
        end
    end
end

local function simulateKeyPress()
    VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.E, false, game)
    task.wait(0.1)
    VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.E, false, game)
end

local AutoBeatNPCToggle = Tabs.Christmas:AddToggle("AutoBeatNPC", {
    Title = "Auto Beat NPC",
    Description = "Auto Fight the NPC's spawned in Snowstorms.",
    Default = false
})

AutoBeatNPCToggle:OnChanged(function()
    isAutoFarming = AutoBeatNPCToggle.Value
    
    if isAutoFarming then
        -- Start proximity prompt updates
        spawn(function()
            while true do
                if not AutoBeatNPCToggle.Value then break end
                updateProximityPrompts(snowstormPath)
                wait(1)
            end
        end)
        
        -- Start key simulation - now checks for NPCs
        spawn(function()
            while true do
                if not AutoBeatNPCToggle.Value then break end
                
                -- Only simulate key press if NPCs are present
                local npcs = snowstormPath:GetChildren()
                if #npcs > 0 then
                    simulateKeyPress()
                end
                
                task.wait(0.1)
            end
        end)
        
        -- Main NPC farming loop
        spawn(function()
            while true do
                if not AutoBeatNPCToggle.Value then break end
                
                local npcs = snowstormPath:GetChildren()
                if #npcs > 0 then
                    for _, npc in ipairs(npcs) do
                        if not AutoBeatNPCToggle.Value then break end
                        
                        if npc:IsA("Model") and npc:FindFirstChild("Table") and 
                           npc.Table:FindFirstChild("PlayerRoot") then
                            local humanoid = game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
                            if humanoid then
                                humanoid.CFrame = npc.Table.PlayerRoot.CFrame
                                wait(2)
                            end
                        end
                    end
                elseif isBossFighting then
                    local selectedNPC = modelDropdown.Value
                    if selectedNPC then
                        local npcModel = npcFolderPath:FindFirstChild(selectedNPC)
                        if npcModel and npcModel:FindFirstChild("Table") then
                            local args = {
                                [1] = selectedNPC,
                                [2] = npcModel.Table,
                                [3] = "Frostlands"
                            }
                            game:GetService("ReplicatedStorage").Packages.Knit.Services.ArmWrestleService.RE.onEnterNPCTable:FireServer(unpack(args))
                            wait(1)
                        end
                    end
                end
                wait(0.1)
            end
        end)
    end
end)

local AutoFightBossToggle = Tabs.Christmas:AddToggle("AutoFightBoss", {
    Title = "Auto Fight Boss",
    Description = "Fight selected boss when no NPCs are present -- Must have Auto Beat NPC enabled.",
    Default = false
})

AutoFightBossToggle:OnChanged(function()
    isBossFighting = AutoFightBossToggle.Value
end)
AutoFightBossToggle:OnChanged(function()
    isBossFighting = AutoFightBossToggle.Value
end)

local Section = Tabs.Christmas:AddSection("Free Gift")

-- Auto Claim Santa Sleigh Gift toggle
local AutoClaimToggle = Tabs.Christmas:AddToggle("AutoClaimSantaSleigh", { 
    Title = "Auto Claim Santa Sleigh Gift", 
    Default = false 
})

AutoClaimToggle:OnChanged(function()
    if AutoClaimToggle.Value then
        while AutoClaimToggle.Value do
            local args = {
                [1] = "SantaSleigh"
            }
            game:GetService("ReplicatedStorage").Packages.Knit.Services.FreeGiftService.RF.Claim:InvokeServer(unpack(args))
            wait(30)
        end
    end
end)

-- Auto Claim Workshop Tree Gift toggle
local AutoClaimWorkshopToggle = Tabs.Christmas:AddToggle("AutoClaimWorkshop", { 
    Title = "Auto Claim Workshop Tree Gift", 
    Default = false 
})

AutoClaimWorkshopToggle:OnChanged(function()
    if AutoClaimWorkshopToggle.Value then
        while AutoClaimWorkshopToggle.Value do
            local args = {
                [1] = "WorkshopTree"
            }
            game:GetService("ReplicatedStorage").Packages.Knit.Services.FreeGiftService.RF.Claim:InvokeServer(unpack(args))
            wait(30)
        end
    end
end)


local IceySection = Tabs.Christmas:AddSection("Icey Merchant")

local IceyMerchantDropdown = Tabs.Christmas:AddDropdown("IceyMerchantDropdown", {
   Title = "Select Merchant Slot(s)",
   Values = {1, 2, 3, 4, 5},
   Multi = true,
   Default = {}
})

local AutoBuyToggle = Tabs.Christmas:AddToggle("AutoBuyToggle", {
   Title = "Auto Buy (Selected Slots)",
   Default = false
})

AutoBuyToggle:OnChanged(function()
   if AutoBuyToggle.Value then
       spawn(function()
           while AutoBuyToggle.Value do
               -- Buy 3 times
               for i = 1, 3 do
                   for number, isSelected in pairs(IceyMerchantDropdown.Value) do
                       if isSelected then
                           local args = {
                               [1] = "Icey Merchant",
                               [2] = number
                           }
                           game:GetService("ReplicatedStorage").Packages.Knit.Services.LimitedMerchantService.RF.BuyItem:InvokeServer(unpack(args))
                           wait(1)
                       end
                   end
               end
               wait(30) -- Wait 30 seconds before next cycle
           end
       end)
   end
end)


local MerchantsSection = Tabs.Christmas:AddSection("Jolly Merchant")

local JollyMerchantDropdown = Tabs.Christmas:AddDropdown("JollyMerchantDropdown", {
    Title = "Select Merchant Slot(s)",
    Values = {1, 2, 3, 4, 5},
    Multi = true,
    Default = {}
 })
 
 local AutoBuyToggle = Tabs.Christmas:AddToggle("AutoBuyToggle", {
    Title = "Auto Buy (Selected Slots)",
    Default = false
 })
 
 AutoBuyToggle:OnChanged(function()
    if AutoBuyToggle.Value then
        spawn(function()
            while AutoBuyToggle.Value do
                -- Buy 3 times
                for i = 1, 3 do
                    for number, isSelected in pairs(JollyMerchantDropdown.Value) do
                        if isSelected then
                            local args = {
                                [1] = "Jolly Merchant",
                                [2] = number
                            }
                            game:GetService("ReplicatedStorage").Packages.Knit.Services.LimitedMerchantService.RF.BuyItem:InvokeServer(unpack(args))
                            wait(1)
                        end
                    end
                end
                wait(30) -- Wait 30 seconds before next cycle
            end
        end)
    end
 end)

 
local MerchantsSection = Tabs.Christmas:AddSection("Workshop Merchant")

local WorkshopMerchantDropdown = Tabs.Christmas:AddDropdown("WorkshopMerchantDropdown", {
    Title = "Select Merchant Slot(s)",
    Values = {1, 2, 3, 4, 5},
    Multi = true,
    Default = {}
 })
 
 local AutoBuyToggle = Tabs.Christmas:AddToggle("AutoBuyToggle", {
    Title = "Auto Buy (Selected Slots)",
    Default = false
 })
 
 AutoBuyToggle:OnChanged(function()
    if AutoBuyToggle.Value then
        spawn(function()
            while AutoBuyToggle.Value do
                -- Buy 3 times
                for i = 1, 3 do
                    for number, isSelected in pairs(WorkshopMerchantDropdown.Value) do
                        if isSelected then
                            local args = {
                                [1] = "Workshop Merchant",
                                [2] = number
                            }
                            game:GetService("ReplicatedStorage").Packages.Knit.Services.LimitedMerchantService.RF.BuyItem:InvokeServer(unpack(args))
                            wait(1)
                        end
                    end
                end
                wait(30) -- Wait 30 seconds before next cycle
            end
        end)
    end
 end)




local TowerSection = Tabs.Christmas:AddSection("Towers")

-- Ice Tower Buttons
TowerSection:AddButton({
    Title = "Use Ice Tower Key (1x)",
    Description = "Use the Ice Tower Key once.",
    Callback = function()
        local args = {
            [1] = "IceTower",
            [2] = false
        }
        game:GetService("ReplicatedStorage").Packages.Knit.Services.TowerService.RF.EnterTower:InvokeServer(unpack(args))
        print("Used Ice Tower Key (1x)")
    end
})

TowerSection:AddButton({
    Title = "Use All Ice Tower Keys (250x)",
    Description = "Use All Ice Tower Keys (max 250 at a time).",
    Callback = function()
        local args = {
            [1] = "IceTower",
            [2] = true
        }
        game:GetService("ReplicatedStorage").Packages.Knit.Services.TowerService.RF.EnterTower:InvokeServer(unpack(args))
        print("Used Ice Tower Keys (250x)")
    end
})

-- Scrooge Tower Buttons

TowerSection:AddButton({
    Title = "Use Scrooge Tower Key (1x)",
    Description = "Use the Scrooge Tower Key once.",
    Callback = function()
        local args = {
            [1] = "ScroogeLookout",
            [2] = false
        }
        game:GetService("ReplicatedStorage").Packages.Knit.Services.TowerService.RF.EnterTower:InvokeServer(unpack(args))
        print("Used Scrooge Tower Key (1x)")
    end
})

TowerSection:AddButton({
    Title = "Use All Scrooge Tower Keys (250x)",
    Description = "Use All Scrooge Tower Keys (max 250 at a time).",
    Callback = function()
        local args = {
            [1] = "ScroogeLookout",
            [2] = true
        }
        game:GetService("ReplicatedStorage").Packages.Knit.Services.TowerService.RF.EnterTower:InvokeServer(unpack(args))
        print("Used Scrooge Tower Keys (250x)")
    end
})

-- Snowstorm Tower Buttons
TowerSection:AddButton({
    Title = "Use Snowstorm Tower Key (1x)",  -- Added missing comma here
    Description = "Use the Snowstorm Tower Key once.",
    Callback = function()
        local args = {
            [1] = "SnowstormTower",
            [2] = false
        }
        game:GetService("ReplicatedStorage").Packages.Knit.Services.TowerService.RF.EnterTower:InvokeServer(unpack(args))
        print("Used Snowstorm Tower Key (1x)")
    end
})

TowerSection:AddButton({
    Title = "Use All Snowstorm Tower Keys (250x)", 
    Description = "Use All Snowstorm Tower Keys (max 250 at a time).",
    Callback = function()
        local args = {
            [1] = "SnowstormTower",
            [2] = true
        }
        game:GetService("ReplicatedStorage").Packages.Knit.Services.TowerService.RF.EnterTower:InvokeServer(unpack(args))
        print("Used Snowstorm Tower Keys (250x)")
    end
})

local WheelSection = Tabs.Christmas:AddSection("Ice Wheel")

-- Auto Spin Wheel toggle
local AutoSpinWheelToggle = Tabs.Christmas:AddToggle("AutoSpinWheel", {
    Title = "Auto Spin Wheel",
    Default = false
})

-- Add Spin Amount Dropdown
local SpinDropdown = Tabs.Christmas:AddDropdown("SpinAmountDropdown", {
    Title = "Select Spin Amount",
    Values = {"1x", "3x", "10x"},
    Multi = false,
    Default = "1x",
})

-- Handle Auto Spin Wheel Toggle
AutoSpinWheelToggle:OnChanged(function()
    if AutoSpinWheelToggle.Value then
        -- Start the Spin based on dropdown selection
        SpinDropdown:OnChanged(function(Value)
            if Value == "1x" then
                while AutoSpinWheelToggle.Value and SpinDropdown.Value == "1x" do
                    local args = {
                        [1] = "Icy Fortune"
                    }
                    game:GetService("ReplicatedStorage").Packages.Knit.Services.SpinnerService.RF.Spin:InvokeServer(unpack(args))
                    print("Used Spin (1x)") -- Debugging log
                    wait(2) -- 2 seconds interval
                end
            elseif Value == "3x" then
                while AutoSpinWheelToggle.Value and SpinDropdown.Value == "3x" do
                    local args = {
                        [1] = "Icy Fortune",
                        [2] = "x10"
                    }
                    game:GetService("ReplicatedStorage").Packages.Knit.Services.SpinnerService.RF.Spin:InvokeServer(unpack(args))
                    print("Used Spin (3x)") -- Debugging log
                    wait(0.5) -- Faster interval for 3x spins
                end
            elseif Value == "10x" then
                while AutoSpinWheelToggle.Value and SpinDropdown.Value == "10x" do
                    local args = {
                        [1] = "Icy Fortune",
                        [2] = "x25"
                    }
                    game:GetService("ReplicatedStorage").Packages.Knit.Services.SpinnerService.RF.Spin:InvokeServer(unpack(args))
                    print("Used Spin (10x)") -- Debugging log
                    wait(0.3) -- Even faster interval for 10x spins
                end
            end
        end)
    end
end)



Window:SelectTab(1)

Fluent:Notify({
    Title = "Fluent",
    Content = "The script has been loaded.",
    Duration = 8
})
